#!/usr/bin/env bash
set -o errexit
trap 'exit 130' INT

MODEL_NAME=${1:-default}
MODEL_DIR="./EXparser/Dataset/${MODEL_NAME}"

# check input model
if ! [[ -d "${MODEL_DIR}" ]]; then
  echo "Model $MODEL_NAME does not exist"
  exit 1
fi

# model directories
LRT_DIR="${MODEL_DIR}/LRT"
LYT_DIR="${MODEL_DIR}/LYT"
SEG_DIR="${MODEL_DIR}/SEG"

if ! [[ -d "$LRT_DIR" ]] || ! [[ -d "${SEG_DIR}" ]] || ! [[ -d "${LYT_DIR}" ]] ; then
  echo "Model $MODEL_NAME is missing LRT, LYT and/or SEG data"
  exit 1
fi

echo
echo "=========================================================================================="
echo "Training reference extraction for $MODEL_NAME model, please wait..."
echo "=========================================================================================="
echo
start_extraction=`date +%s`
docker run -it --rm -v $(pwd):/app excite_toolchain train_extraction $MODEL_NAME
end_extraction=`date +%s`
runtime_extraction=$((end_extraction-start_extraction))

echo
echo "=========================================================================================="
echo "Training reference segmentation for $MODEL_NAME model, please wait..."
echo "=========================================================================================="
echo
start_segmentation=`date +%s`
docker run -it --rm -v $(pwd):/app excite_toolchain train_segmentation $MODEL_NAME
end_segmentation=`date +%s`

# Report performance
convertsecs() {
 ((h=${1}/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%02d:%02d:%02d" $h $m $s
}
runtime_segmentation=$((end_segmentation-start_segmentation))
echo "Finished extraction training for  $MODEL_NAME model in $(convertsecs $runtime_extraction) and segmentation training in $(convertsecs $runtime_segmentation)."
